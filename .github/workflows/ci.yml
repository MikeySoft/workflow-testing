name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest pytest-cov
      - name: Run tests with coverage
        run: PYTHONPATH=$(pwd)/app python -m pytest --cov=app --cov-report=xml --cov-report=term-missing tests/

  sonarqube:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest pytest-cov
      - name: Run tests with coverage
        run: PYTHONPATH=$(pwd)/app python -m pytest --cov=app --cov-report=xml --cov-report=term-missing tests/
      - name: Create SonarCloud project if not exists
        run: |
          set -e
          sudo apt-get update && sudo apt-get install -y jq
          PROJECT_KEY=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]' | tr '/' '_')
          echo "PROJECT_KEY=$PROJECT_KEY" >> $GITHUB_ENV
          PROJECT_NAME="$PROJECT_KEY"
          PROJECT_EXISTS="$(curl -s \
            --header "Authorization: Bearer ${{ secrets.SONAR_TOKEN}}" \
            -X GET "${{ vars.SONAR_HOST_URL }}/api/projects/search?organization=${{ vars.SONAR_ORG }}&projects=$PROJECT_KEY" | jq '.components | length')"
          if ! [[ "$PROJECT_EXISTS" =~ ^[0-9]+$ ]]; then
            echo "Error: Could not determine if SonarCloud project exists. API or jq failed."
            exit 1
          fi
          if [ "$PROJECT_EXISTS" -eq "0" ]; then
            echo "Creating SonarCloud project..."
            PROJECT_CREATE="$(curl -s \
              -X POST "${{ vars.SONAR_HOST_URL }}/api/projects/create" \
              --header "Authorization: Bearer ${{ secrets.SONAR_TOKEN}}" \
              -d "organization=${{ vars.SONAR_ORG }}" \
              -d "name=$PROJECT_NAME" \
              -d "project=$PROJECT_KEY" \
              -d "visibility=private" \
              -d "newCodeDefinitionType=days&newCodeDefinitionValue=7")"
            if jq -r '.project' /dev/null 2>&1 <<<"${PROJECT_CREATE}"; then
              echo "SonarCloud project created successfully."
              echo "Response: ${PROJECT_CREATE}"
              echo "Setting SonarQube Default branch to main"
              curl -s -X POST --header "Authorization: Bearer ${{ secrets.SONAR_TOKEN}}" "${{ vars.SONAR_HOST_URL }}/api/project_branches/rename" \
                -d "organization=${{ vars.SONAR_ORG }}&name=main&project=${PROJECT_KEY}"
            else
              echo "Failed to create SonarCloud project: $PROJECT_CREATE"
              exit 1
            fi
          else
            echo "SonarCloud project already exists."
          fi
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ env.PROJECT_KEY }}
            -Dsonar.organization=${{ vars.SONAR_ORG }}
            -Dsonar.python.coverage.reportPaths=coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
