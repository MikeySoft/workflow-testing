name: Build Lambda Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "app/**"

permissions:
  contents: write

jobs:
  build-lambda:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            python: 3.13
            runner: ubuntu-latest
          - arch: arm64
            python: 3.13
            runner: ubuntu-24.04-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python }}"

      - name: Create build folder
        run: |
          rm -rf build
          mkdir build

      - name: Install requirements in build folder
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt --target build/

      - name: Copy source code and requirements.txt
        run: |
          cp -r app/* build/
          cp app/requirements.txt build/

      - name: Zip build folder
        run: |
          cd build
          zip -r ../lambda_python${{ matrix.python }}_${{ matrix.arch }}.zip .

      - name: Create base64 hash of zip
        run: |
          base64 lambda_python${{ matrix.python }}_${{ matrix.arch }}.zip > lambda_python${{ matrix.python }}_${{ matrix.arch }}.zip.b64

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-build-python${{ matrix.python }}-${{ matrix.arch }}
          path: |
            lambda_python${{ matrix.python }}_${{ matrix.arch }}.zip
            lambda_python${{ matrix.python }}_${{ matrix.arch }}.zip.b64

  release-lambda:
    needs: build-lambda
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Auto-increment release version
        id: version
        run: |
          VERSION_FILE=version.txt
          if [ -f "$VERSION_FILE" ]; then
            VERSION=$(cat $VERSION_FILE)
          else
            # Fetch latest release tag from GitHub
            LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)
            if [[ "$LATEST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              VERSION="${LATEST_TAG:1}"
            else
              VERSION="1.0.0"
            fi
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH+1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > $VERSION_FILE
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create GitHub Release and Upload Artifacts
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version.outputs.version }}
          name: Lambda Release v${{ steps.version.outputs.version }}
          artifacts: |
            artifacts/**/lambda_python*.zip
            artifacts/**/lambda_python*.zip.b64
            version.txt
          token: ${{ secrets.GITHUB_TOKEN }}
